//===========================================================
//
// 水たまりの波紋処理[ripples.cpp]
// Author 大原怜将
//
//===========================================================
#include "ripples.h"
#include "manager.h"
#include "texture.h"

//===========================================================
// 定数定義
//===========================================================
namespace
{
	const char* TEXTURE_PATH = "data\\TEXTURE\\waka.png";  // 波紋のテクスチャパス
	const D3DXVECTOR2 TARGET_POS = { 50.0f, 50.0f };       // 目標の値
	const float LERP_SPEED = 0.025f;                       // 目標の値までの補正係数
}

//===========================================================
// コンストラクタ
//===========================================================
CRipples::CRipples()
{

}

//===========================================================
// コンストラクタ
//===========================================================
CRipples::CRipples(D3DXVECTOR3 pos)
{

}

//===========================================================
// デストラクタ
//===========================================================
CRipples::~CRipples()
{

}

//===========================================================
// 初期化処理
//===========================================================
HRESULT CRipples::Init(void)
{
	// 派生元の初期化処理
	CObject3D::Init();

	// テクスチャの情報を取得
	CTexture* pTexture = CManager::GetInstance()->GetTexture();

	// テクスチャのインデックス番号取得
	SetIdxTex(pTexture->Regist(TEXTURE_PATH));

	return S_OK;
}

//===========================================================
// 終了処理
//===========================================================
void CRipples::Uninit(void)
{
	// 派生元の終了処理
	CObject3D::Uninit();
}

//===========================================================
// 更新処理
//===========================================================
void CRipples::Update(void)
{
	// 派生元の更新処理
	CObject3D::Update();

	// 目標の値まで補正する
	EaseToTarget(TARGET_POS, LERP_SPEED);

	// α値を下げる
	GradualFadeOut(0.007f);

	// α値取得
	float cola = GetColor().a;

	// α値が0以下になったら終了処理を行う
	if (cola <= 0.0f)
		Uninit();
}

//===========================================================
// 描画処理
//===========================================================
void CRipples::Draw(void)
{
	// 派生元の描画処理
	CObject3D::Draw();
}

//===========================================================
// 生成処理
//===========================================================
CRipples* CRipples::Create(D3DXVECTOR3 pos)
{
	CRipples* pRipples = new CRipples(pos);

	if (pRipples != nullptr)
	{
		pRipples->Init();
		pRipples->SetPosition(pos);
		pRipples->SetColor({1.0f, 1.0f, 1.0f, 0.8f});
		pRipples->SetSize(1.0f, 1.0f);
		pRipples->SetDraw(true);
	}
		

	return pRipples;
}